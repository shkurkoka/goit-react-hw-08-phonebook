{"version":3,"file":"static/js/553.3578ff03.chunk.js","mappings":"+OAKaA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MA0BjB,OACE,kBAAMC,SAzBa,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACXC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAASL,EAAKG,SAASE,OAAOD,MAE9BE,EAAW,CACfJ,KAAAA,EACAG,OAAAA,GAGmBb,EAASe,MAC5B,SAACC,GAAD,OAAaA,EAAQN,KAAKO,gBAAkBP,EAAKO,aAAjD,IAIAC,MAAM,4DAIRf,GAASgB,EAAAA,EAAAA,IAAWL,IACpBN,EAAKY,QACN,EAG+BC,UAAU,OAAxC,WACE,mBAAOC,QAAQ,OAAOD,UAAU,QAAhC,WAAwC,oCACtC,kBACEE,KAAK,OACLb,KAAK,OACLW,UAAU,aACVG,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOJ,QAAQ,SAASD,UAAU,QAAlC,WAA0C,4CACxC,kBACEE,KAAK,MACLb,KAAK,SACLc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAASF,UAAU,SAAhC,2BAGL,ECrDYM,EAAc,SAAC,GAAiB,IAAfX,EAAc,EAAdA,QACtBb,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,4BAAOY,EAAQN,KAAf,KAAuBM,EAAQH,WAC/B,mBAAQQ,UAAU,SAASO,QAAS,kBAAMzB,GAAS0B,EAAAA,EAAAA,IAAcb,EAAQc,IAArC,EAApC,sBAKL,ECVYC,EAAc,WAEzB,IAAI/B,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvB8B,GAAS/B,EAAAA,EAAAA,IAAYgC,EAAAA,IASzB,OACE,wBAPOjC,EAASgC,QAAO,SAAAhB,GAAO,OAC5BA,EAAQN,KAAKO,cAAciB,UAAe,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQf,gBAAiB,GADjC,IAQLkB,KAAI,SAAAnB,GAAO,OAChC,yBACE,SAACW,EAAD,CAAaX,QAASA,KADfA,EAAQc,GADe,KAOvC,ECtBYM,EAAS,WACpB,IAAMjC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,4BACE,kBAAOkB,QAAQ,SAAf,oCACA,kBACEC,KAAK,OACLb,KAAK,SACL2B,YAAY,iBACZC,SAAU,SAAChC,GAAD,OAXY0B,EAWgB1B,EAAIiC,OAAO3B,WAVrDT,GAASqC,EAAAA,EAAAA,IAAUR,IADM,IAACA,CAWZ,MAIjB,ECeD,G,QA1BiB,WACf,IAAM7B,GAAWC,EAAAA,EAAAA,MACXqC,GAAYxC,EAAAA,EAAAA,IAAYyC,EAAAA,IACxBC,GAAQ1C,EAAAA,EAAAA,IAAY2C,EAAAA,IAM1B,OAJAC,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,MACV,GAAE,CAAC3C,KAGF,iBAAKkB,UAAU,OAAf,WACE,iBAAKA,UAAU,aAAf,WACE,uCACA,SAACtB,EAAD,OAGA0C,IAAcE,GAAQ,mDACtB,iBAAKtB,UAAU,cAAf,WACE,sCACA,SAACe,EAAD,KACA,SAACL,EAAD,SAKT,E","sources":["components/phoneBook/ContactForm.jsx","components/phoneBook/ContactItem.jsx","components/phoneBook/ContactList.jsx","components/phoneBook/Filter.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContacts } from \"../../redux/contacts/contactsSlice\";\nimport { addContact } from \"../../redux/contacts/operations\";\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const formData = {\n      name,\n      number,\n    }\n\n    const isNameExists = contacts.some(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isNameExists) {\n      alert(\"Contact with this name already exists in the phonebook.\");\n      return;\n    }\n\n    dispatch(addContact(formData));\n    form.reset();\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <label htmlFor=\"name\" className=\"label\"><span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          className=\"input-name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          />\n      </label>\n      <label htmlFor=\"number\" className=\"label\"><span>Phone Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          />\n        </label>\n      <button type=\"submit\" className=\"submit\">Add contact</button>\n    </form>\n  );\n}","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <span>{contact.name}: {contact.number}</span>\n      <button className=\"delete\" onClick={() => dispatch(deleteContact(contact.id))}>\n        Delete\n      </button>\n    </div>\n  );\n};","import React from \"react\";\nimport {ContactItem} from \"./ContactItem\";\nimport { useSelector } from \"react-redux\";\nimport { getContacts, getFilter } from \"../../redux/contacts/contactsSlice\";\n\nexport const ContactList = () => {\n\n  let contacts = useSelector(getContacts);\n  let filter = useSelector(getFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter?.toLowerCase() || \"\")\n    );\n  }\n\n\n  return (\n    <ul>\n      {getFilteredContacts().map(contact => (\n        <li key={contact.id}>\n          <ContactItem contact={contact} />\n        </li>\n      ))}\n    </ul>\n  );\n};","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/contactsSlice\";\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = (filter) => {\n    dispatch(setFilter(filter));\n  };\n  \n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search by name\"\n        onChange={(evt) => handleFilterChange(evt.target.value)}\n      />\n    </div>\n  );\n};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nimport {ContactForm} from \"../phoneBook/ContactForm\";\nimport {ContactList} from \"../phoneBook/ContactList\";\nimport { Filter } from \"../phoneBook/Filter\";\nimport \"../phoneBook/phonebook.css\";\nimport { getError, getIsLoading } from \"redux/contacts/contactsSlice\";\nimport { fetchContacts } from \"redux/contacts/operations\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"main\">\n      <div className=\"first-wrap\">\n        <h1>Phonebook</h1>\n        <ContactForm/>\n      </div>\n      {\n        isLoading && !error ? <b>Request in progress...</b> : \n        <div className=\"second-wrap\">\n          <h2>Contacts</h2>\n          <Filter/>\n          <ContactList/>\n        </div>\n      }\n      </div>\n  );\n}\nexport default Contacts;"],"names":["ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","onSubmit","evt","preventDefault","form","currentTarget","name","elements","value","number","formData","some","contact","toLowerCase","alert","addContact","reset","className","htmlFor","type","pattern","title","required","ContactItem","onClick","deleteContact","id","ContactList","filter","getFilter","includes","map","Filter","placeholder","onChange","target","setFilter","isLoading","getIsLoading","error","getError","useEffect","fetchContacts"],"sourceRoot":""}